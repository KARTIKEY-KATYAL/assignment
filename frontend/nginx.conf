events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # Increased buffer sizes to avoid "Request Header Or Cookie Too Large" errors
    client_header_buffer_size 8k;
    large_client_header_buffers 8 32k;
    client_max_body_size 50M;
    client_body_buffer_size 128k;

    # Timeouts
    client_body_timeout 60s;
    client_header_timeout 60s;
    send_timeout 60s;

    server {
        listen 80;
        server_name localhost;
        root /usr/share/nginx/html;
        index index.html;

        # Gzip compression
        gzip on;
        gzip_types text/css application/javascript application/json image/svg+xml;
        gzip_min_length 1000;
        gzip_comp_level 5;

        # Security headers
        add_header X-Frame-Options "DENY" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;

        # Handle client-side routing (for SPAs)
        location / {
            try_files $uri $uri/ /index.html;
        }

        # API proxy to backend service
        location /api/ {
            proxy_pass http://backend:5000;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # Error page for large headers (optional)
        error_page 400 /custom_400.html;
        location = /custom_400.html {
            internal;
            default_type text/html;
            return 400 "<h1>400 - Bad Request</h1><p>Header or cookie too large.</p>";
        }
    }
}
